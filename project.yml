# == Global project settings ===========================================

name:             'POSM (Portable OpenStreetMap)'
description:      'POSM style based on the American Red Cross HDM style, ported from TileMill2 (Mapbox Studio Classic) back to TileMill1 for offline rendering'
attribution:      'Map Data Â© OpenStreetMap'
center:           [-122.3321, 47.6062, 18]
format:           png8
interactivity:    false
minzoom:          1
maxzoom:          22
srs:              '+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0.0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs +over'
metatile:         2


# == Layer & Datasource defaults =======================================

_layer_default:   &layer
  'srs-name':     '3857'
  srs:            '+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0.0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs +over'

_pg_default:      &postgis
  type:           postgis
  dbname:         '{{PGDATABASE}}'
  host:           '{{PGHOST}}'
  user:           '{{PGUSER}}'
  password:       '{{PGPASSWORD}}'
  port:           '{{PGPORT}}'
  geometry_field: way
  srid:           3857
  extent:         '-20037508.34,-20037508.34,20037508.34,20037508.34'
  srs:            '+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0.0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs +over'
  max_async_connection: 4
  max_size: 100
  connect_timeout: 1
  twkb_encoding: true

_shp_default:     &shapefile
  type:           shape
  estimate_extent: false
  extent:         '-20037508.34,-20037508.34,20037508.34,20037508.34'
  srs:            '+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0.0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs +over'

# == Stylesheets =======================================================

Stylesheet:
  - vars.mss
  - bg.mss
  - road.mss
  - hdm.mss
  - label.mss
  - poi_classic.mss


# == Layers ============================================================

Layer:

  - <<: *layer
    # status: off
    name: landcover
    id:   landcover
    Datasource:
      <<: *postgis
      geometry_field: way
      table: >
        (
          SELECT
            way,
            tags -> 'amenity' amenity,
            tags -> 'landuse' landuse,
            tags -> 'leisure' leisure,
            tags -> 'natural' "natural",
            tags -> 'wetland' wetland
          FROM planet_osm_polygon
          WHERE way && !bbox!
            AND tags ? 'natural'
            AND way_area > 0.01 * !pixel_width!::real * !pixel_height!::real
        ) AS _

  - <<: *layer
    # status: off
    name: landuse
    id:   landuse
    properties:
      cache-features: true
      minzoom: 12
    Datasource:
      <<: *postgis
      geometry_field: way
      table: >
        (
          SELECT
            way,
            tags -> 'amenity' amenity,
            tags -> 'landuse' landuse,
            tags -> 'leisure' leisure,
            tags -> 'natural' "natural",
            tags -> 'wetland' wetland
          FROM planet_osm_polygon
          WHERE way && !bbox!
            AND tags ?| ARRAY['amenity', 'landuse', 'leisure', 'wetland']
            AND way_area > 0.01 * !pixel_width!::real * !pixel_height!::real
            AND (zoom(!scale_denominator!) >= 13
              OR (zoom(!scale_denominator!) >= 12 AND way_area > 16 * !pixel_width!::real * !pixel_height!::real))
        ) AS _

  - <<: *layer
    # status: off
    name: water
    id:   water
    Datasource:
      <<: *postgis
      geometry_field: way
      table: >
        (
          SELECT
            geom way,
            null landuse,
            'coastline' "natural",
            null water,
            null waterway,
            null man_made
          FROM water_polygons
          WHERE geom && !bbox!
        UNION ALL
          SELECT
            way,
            tags -> 'landuse' landuse,
            tags -> 'natural' "natural",
            tags -> 'water' water,
            tags -> 'waterway' waterway,
            tags -> 'man_made' man_made
          FROM planet_osm_polygon
          WHERE way && !bbox!
            AND tags ?| ARRAY['landuse', 'man_made', 'natural', 'water', 'waterway']
            AND (tags ? 'water' OR tags ? 'waterway' OR tags -> 'landuse' IN ('reservoir', 'pond') OR tags -> 'natural' IN ('water') OR tags -> 'man_made' IN ('pier', 'breakwater', 'groyne'))
            AND way_area > 0.01 * !pixel_width!::real * !pixel_height!::real
        UNION ALL
          -- #waterway
          SELECT
            way,
            tags -> 'landuse' landuse,
            tags -> 'natural' "natural",
            tags -> 'water' water,
            tags -> 'waterway' waterway,
            tags -> 'man_made' man_made
          FROM planet_osm_line
          WHERE way && !bbox!
            AND zoom(!scale_denominator!) >= 8
            AND tags ?| ARRAY['man_made', 'natural', 'water', 'waterway']
            AND (tags ? 'water' OR tags ? 'waterway' OR tags -> 'natural' IN ('pond') OR tags -> 'man_made' IN ('pier', 'breakwater', 'groyne'))
        UNION ALL
          -- #ne_10m_rivers_lake_centerlines_scale_rank
          SELECT
            geom way,
            null landuse,
            'water' "natural",
            'river' water,
            'river' waterway,
            null man_made
          FROM ne_10m_rivers_lake_centerlines_scale_rank
          WHERE geom && !bbox!
            AND zoom(!scale_denominator!) BETWEEN 4 AND 7
            AND featurecla = 'River'
            AND scalerank < zoom(!scale_denominator!)
        ) AS _

  - <<: *layer
    status: off
    name: admin
    id:   admin
    geometry: "linestring"
    Datasource:
      <<: *postgis
      geometry_field: way
      table: >
        (
          SELECT
            way,
            tags -> 'boundary boundary',
            tags -> 'boundary boundary',
            to_number(tags -> 'admin_level', 'FM99') as admin_level
          FROM planet_osm_line
          WHERE way && !bbox!
            AND tags ? 'boundary'
          ORDER BY to_number(tags -> 'admin_level', 'FM99') DESC -- With 10 as a valid value, we need to do a numeric ordering, not a text ordering
        ) AS _

  - <<: *layer
    status: off
    name: man-made
    id:   man-made
    Datasource:
      <<: *postgis
      geometry_field: way
      table: >
        (
          SELECT
            way,
            tags -> 'man_made' man_made
          FROM planet_osm_polygon
          WHERE way && !bbox!
            AND tags ? 'man_made'
        UNION ALL
          SELECT
            way,
            tags -> 'man_made' man_made
          FROM planet_osm_polygon
          WHERE way && !bbox!
            AND tags ? 'man_made'
            AND way_area > 0.01 * !pixel_width!::real * !pixel_height!::real
        ) AS _

  - <<: *layer
    # status: off
    name: buildings
    id:   buildings
    properties:
      cache-features: true
      minzoom: 12
    Datasource:
      <<: *postgis
      geometry_field: way
      table: >
        (
          SELECT
            way,
            tags -> 'building' building,
            tags -> 'building:levels' levels
          FROM planet_osm_polygon
          WHERE way && !bbox!
            AND tags ?| ARRAY['aeroway', 'building']
            AND ((tags ? 'building' AND tags -> 'building' != 'no')
              OR (tags ? 'aeroway') AND tags -> 'aeroway' IN ('terminal', 'hangar'))
            AND way_area > 0.01 * !pixel_width!::real * !pixel_height!::real
            AND (zoom(!scale_denominator!) >= 15
              OR way_area > 4 * !pixel_width!::real * !pixel_height!::real)
          ORDER BY z_order, way_area DESC
        ) AS _

  - <<: *layer
    # status: off
    name: infrastructure
    id:   infrastructure
    geometry: "linestring"
    Datasource:
      <<: *postgis
      # This is one of the most complex layers, so it bears explaining in some detail
      # It is necessary to
      # - Have roads and railways in the same layer to get ordering right
      # - Return two linestrings for ways which are both a road and railway
      # - Compute z_order here, rather than rely on osm2pgsql z_order
      table: |-
        (SELECT
          *,
          GREATEST(0.5, GREATEST(_width, COALESCE(lanes, default_lane_count) * default_lane_width) / !pixel_width!) width
        FROM
        (SELECT
            way,
            (CASE WHEN substr(feature, length(feature)-3, 4) = 'link' THEN substr(feature, 0, length(feature)-4) ELSE feature END) AS feature,
            horse,
            foot,
            bicycle,
            tracktype,
            int_surface,
            access,
            construction,
            service,
            link,
            layernotnull,
            prio,
            -- TODO write a function that handles units (feet, inches)
            to_number(0 || lanes, 'FM9999.9') lanes,
            to_number(0 || width, 'FM9999.9') _width,
            default_lane_count,
            default_lane_width
          FROM ( -- begin "features" subselect that contains both roads and rail/aero
            SELECT
                way,
                ('highway_' || highway) AS feature, -- only motorway to tertiary links are accepted later on
                horse,
                foot,
                bicycle,
                tracktype,
                CASE WHEN surface IN ('unpaved', 'compacted', 'dirt', 'earth', 'fine_gravel', 'grass', 'grass_paver', 'gravel', 'ground',
                                      'mud', 'pebblestone', 'salt', 'sand', 'woodchips', 'clay') THEN 'unpaved'
                  WHEN surface IN ('paved', 'asphalt', 'cobblestone', 'cobblestone:flattened', 'sett', 'concrete', 'concrete:lanes',
                                      'concrete:plates', 'paving_stones', 'metal', 'wood') THEN 'paved'
                  ELSE NULL
                END AS int_surface,
                CASE WHEN access IN ('destination') THEN 'destination'::text
                  WHEN access IN ('no', 'private') THEN 'no'::text
                  ELSE NULL
                END AS access,
                construction,
                CASE
                  WHEN service IN ('parking_aisle', 'drive-through', 'driveway') THEN 'INT-minor'::text
                  ELSE 'INT-normal'::text
                END AS service,
                CASE
                  WHEN substr(highway, length(highway)-3, 4) = 'link' THEN 'yes'
                  ELSE 'no'
                END AS link,
                COALESCE(to_number(layer, 'FM99'), 0) layernotnull,
                tags -> 'lanes' lanes,
                tags -> 'width' width
              FROM planet_osm_line
              WHERE (tunnel IS NULL OR NOT tunnel IN ('yes', 'building_passage'))
                AND (covered IS NULL OR NOT covered = 'yes')
                AND (bridge IS NULL OR NOT bridge IN ('yes', 'boardwalk', 'cantilever', 'covered', 'low_water_crossing', 'movable', 'trestle', 'viaduct'))
                AND tags ? 'highway'
                AND (zoom(!scale_denominator!) >= 16
                  OR (zoom(!scale_denominator!) >= 13 AND (NOT tags ? 'footway' OR tags -> 'footway' NOT IN ('sidewalk')))
                  OR (zoom(!scale_denominator!) >= 12 AND tags -> 'highway' IN ('motorway', 'trunk', 'primary', 'secondary', 'tertiary'))
                  OR (zoom(!scale_denominator!) >= 10 AND tags -> 'highway' IN ('motorway', 'trunk', 'primary')))
                -- end of road select
            UNION ALL
            SELECT
                way,
                COALESCE(
                  ('railway_' || (CASE WHEN railway = 'preserved' AND service IN ('spur', 'siding', 'yard') THEN 'INT-preserved-ssy'::text
                                       WHEN (railway = 'rail' AND service IN ('spur', 'siding', 'yard')) THEN 'INT-spur-siding-yard'
                                       WHEN (railway = 'tram' AND service IN ('spur', 'siding', 'yard')) THEN 'tram-service' ELSE railway END)),
                  ('aeroway_' || aeroway)
                ) AS feature,
                horse,
                foot,
                bicycle,
                tracktype,
                null surface,
                CASE
                  WHEN access IN ('destination') THEN 'destination'::text
                  WHEN access IN ('no', 'private') THEN 'no'::text
                  ELSE NULL
                END AS access,
                construction,
                CASE WHEN service IN ('parking_aisle', 'drive-through', 'driveway') THEN 'INT-minor'::text ELSE 'INT-normal'::text END AS service,
                'no' AS link,
                COALESCE(to_number(layer, 'FM99'), 0) layernotnull,
                tags -> 'lanes' lanes,
                tags -> 'width' width
              FROM planet_osm_line
              WHERE (tunnel IS NULL OR NOT tunnel IN ('yes', 'building_passage'))
                AND (covered IS NULL OR NOT covered = 'yes')
                AND (bridge IS NULL OR NOT bridge IN ('yes', 'boardwalk', 'cantilever', 'covered', 'low_water_crossing', 'movable', 'trestle', 'viaduct'))
                AND tags ?| ARRAY['railway', 'aeroway']
                AND (zoom(!scale_denominator!) >= 12
                  OR (zoom(!scale_denominator!) >= 10 AND tags ? 'aeroway'))
                -- end of rail/aero select
            ) AS features
          JOIN (VALUES -- this join is also putting a condition on what is selected. features not matching it do not make it into the results.
              ('railway_rail', 440),
              ('railway_INT-preserved-ssy', 430),
              ('railway_INT-spur-siding-yard', 430),
              ('railway_subway', 420),
              ('railway_narrow_gauge', 420),
              ('railway_light_rail', 420),
              ('railway_preserved', 420),
              ('railway_funicular', 420),
              ('railway_monorail', 420),
              ('railway_miniature', 420),
              ('railway_turntable', 420),
              ('railway_tram', 410),
              ('railway_tram-service', 405),
              ('railway_disused', 400),
              ('railway_construction', 400),
              ('highway_motorway', 380),
              ('highway_trunk', 370),
              ('highway_primary', 360),
              ('highway_secondary', 350),
              ('highway_tertiary', 340),
              ('highway_residential', 330),
              ('highway_unclassified', 330),
              ('highway_road', 330),
              ('highway_living_street', 320),
              ('highway_pedestrian', 310),
              ('highway_raceway', 300),
              ('highway_motorway_link', 240),
              ('highway_trunk_link', 230),
              ('highway_primary_link', 220),
              ('highway_secondary_link', 210),
              ('highway_tertiary_link', 200),
              ('highway_service', 150),
              ('highway_track', 110),
              ('highway_path', 100),
              ('highway_footway', 100),
              ('highway_bridleway', 100),
              ('highway_cycleway', 100),
              ('highway_steps', 100),
              ('highway_platform', 90),
              ('railway_platform', 90),
              ('aeroway_runway', 60),
              ('aeroway_taxiway', 50),
              ('highway_construction', 10)
            ) AS ordertable (feature, prio)
            USING (feature)
          JOIN (VALUES -- this join is also putting a condition on what is selected. features not matching it do not make it into the results.
              ('railway_rail', 1, 6),
              ('railway_INT-preserved-ssy', 1, 6),
              ('railway_INT-spur-siding-yard', 1, 6),
              ('railway_subway', 1, 4),
              ('railway_narrow_gauge', 1, 6),
              ('railway_light_rail', 1, 4),
              ('railway_preserved', 1, 6),
              ('railway_funicular', 1, 4),
              ('railway_monorail', 1, 4),
              ('railway_miniature', 1, 2),
              ('railway_turntable', 1, 6),
              ('railway_tram', 1, 4),
              ('railway_tram-service', 1, 4),
              ('railway_disused', 1, 6),
              ('railway_construction', 1, 6),
              ('highway_motorway', 2, 5),
              ('highway_trunk', 2, 4.75),
              ('highway_primary', 2, 4.5),
              ('highway_secondary', 2, 4.25),
              ('highway_tertiary', 2, 4),
              ('highway_residential', 2, 3),
              ('highway_unclassified', 2, 3),
              ('highway_road', 2, 3),
              ('highway_living_street', 2, 3),
              ('highway_pedestrian', 1, 5),
              ('highway_raceway', 6, 4.5),
              ('highway_motorway_link', 1, 4.5),
              ('highway_trunk_link', 1, 4.5),
              ('highway_primary_link', 1, 4.5),
              ('highway_secondary_link', 1, 4.5),
              ('highway_tertiary_link', 1, 4),
              ('highway_service', 1, 4),
              ('highway_track', 1, 3),
              ('highway_path', 1, 1.5),
              ('highway_footway', 1, 1.5),
              ('highway_bridleway', 1, 1.5),
              ('highway_cycleway', 2, 2.5),
              ('highway_steps', 1, 1.5),
              ('highway_platform', 1, 6),
              ('railway_platform', 1, 6),
              ('aeroway_runway', 1, 80),
              ('aeroway_taxiway', 1, 15),
              ('highway_construction', 2, 4.5)
            ) AS lanetable (feature, default_lane_count, default_lane_width)
            USING (feature)
          ORDER BY
            layernotnull,
            prio,
            CASE WHEN access IN ('no', 'private') THEN 0 WHEN access IN ('destination') THEN 1 ELSE 2 END,
            CASE WHEN int_surface IN ('unpaved') THEN 0 ELSE 2 END
        ) AS roads_fill
        ) AS _
    properties:
      cache-features: true
      minzoom: 10
    advanced: {}

  - <<: *layer
    # status: off
    name: tunnels
    id:   tunnels
    geometry: "linestring"
    Datasource:
      <<: *postgis
      geometry_field: way
      # This query is quite large, having to deal with both roads, railways and
      # runways. To allow for ways that are both railways and roads, a UNION
      # ALL is present, and to use an ordering different than current osm2pgsql
      # an order is generated in SQL.
      table: |-
        (SELECT
          *,
          GREATEST(0.5, GREATEST(_width, COALESCE(lanes, default_lane_count) * default_lane_width) / !pixel_width!) width
        FROM
        (SELECT
            way,
            (CASE WHEN substr(feature, length(feature)-3, 4) = 'link' THEN substr(feature, 0, length(feature)-4) ELSE feature END) AS feature,
            horse,
            foot,
            bicycle,
            tracktype,
            int_surface,
            access,
            construction,
            service,
            link,
            layernotnull,
            prio,
            -- TODO write a function that handles units (feet, inches)
            to_number(0 || lanes, 'FM9999.9') lanes,
            to_number(0 || width, 'FM9999.9') _width,
            default_lane_count,
            default_lane_width
          FROM ( -- subselect that contains both roads and rail/aero
            SELECT
                way,
                ('highway_' || highway) AS feature, --only motorway to tertiary links are accepted later on
                horse,
                foot,
                bicycle,
                tracktype,
                CASE WHEN surface IN ('unpaved', 'compacted', 'dirt', 'earth', 'fine_gravel', 'grass', 'grass_paver', 'gravel', 'ground',
                                      'mud', 'pebblestone', 'salt', 'sand', 'woodchips', 'clay') THEN 'unpaved'
                  WHEN surface IN ('paved', 'asphalt', 'cobblestone', 'cobblestone:flattened', 'sett', 'concrete', 'concrete:lanes',
                                      'concrete:plates', 'paving_stones', 'metal', 'wood') THEN 'paved'
                  ELSE NULL
                END AS int_surface,
                CASE WHEN access IN ('destination') THEN 'destination'::text
                  WHEN access IN ('no', 'private') THEN 'no'::text
                  ELSE NULL
                END AS access,
                construction,
                CASE
                  WHEN service IN ('parking_aisle', 'drive-through', 'driveway') THEN 'INT-minor'::text
                  ELSE 'INT-normal'::text
                END AS service,
                CASE
                  WHEN substr(highway, length(highway)-3, 4) = 'link' THEN 'yes'
                  ELSE 'no'
                END AS link,
                COALESCE(to_number(layer, 'FM99'), 0) layernotnull,
                tags -> 'lanes' lanes,
                tags -> 'width' width
              FROM planet_osm_line
              WHERE (tunnel = 'yes' OR tunnel = 'building_passage' OR covered = 'yes')
                AND tags ? 'highway'
                AND (zoom(!scale_denominator!) >= 13
                  OR (zoom(!scale_denominator!) >= 12 AND tags -> 'highway' IN ('motorway', 'trunk', 'primary', 'secondary', 'tertiary')))
                -- end of road select
            UNION ALL
            SELECT
                way,
                COALESCE(
                  ('railway_' || (CASE WHEN railway = 'preserved' AND service IN ('spur', 'siding', 'yard') THEN 'INT-preserved-ssy'::text
                                       WHEN (railway = 'rail' AND service IN ('spur', 'siding', 'yard')) THEN 'INT-spur-siding-yard'
                                       WHEN (railway = 'tram' AND service IN ('spur', 'siding', 'yard')) THEN 'tram-service' ELSE railway END)),
                  ('aeroway_' || aeroway)
                ) AS feature,
                horse,
                foot,
                bicycle,
                tracktype,
                'null',
                CASE
                  WHEN access IN ('destination') THEN 'destination'::text
                  WHEN access IN ('no', 'private') THEN 'no'::text
                  ELSE NULL
                END AS access,
                construction,
                CASE WHEN service IN ('parking_aisle', 'drive-through', 'driveway') THEN 'INT-minor'::text ELSE 'INT-normal'::text END AS service,
                'no' AS link,
                COALESCE(to_number(layer, 'FM99'), 0) layernotnull,
                tags -> 'lanes' lanes,
                tags -> 'width' width
              FROM planet_osm_line
              WHERE (tunnel = 'yes' OR tunnel = 'building_passage' OR covered = 'yes')
                AND tags ?| ARRAY['railway', 'aeroway']
                AND (zoom(!scale_denominator!) >= 13
                  OR (zoom(!scale_denominator!) >= 10 AND tags ? 'aeroway'))
                -- end of rail/aero select
            ) AS features
          JOIN (VALUES -- this join is also putting a condition on what is selected. features not matching it do not make it into the results.
              ('railway_rail', 440),
              ('railway_INT-preserved-ssy', 430),
              ('railway_INT-spur-siding-yard', 430),
              ('railway_subway', 420),
              ('railway_narrow_gauge', 420),
              ('railway_light_rail', 420),
              ('railway_preserved', 420),
              ('railway_funicular', 420),
              ('railway_monorail', 420),
              ('railway_miniature', 420),
              ('railway_turntable', 420),
              ('railway_tram', 410),
              ('railway_tram-service', 405),
              ('railway_disused', 400),
              ('railway_construction', 400),
              ('highway_motorway', 380),
              ('highway_trunk', 370),
              ('highway_primary', 360),
              ('highway_secondary', 350),
              ('highway_tertiary', 340),
              ('highway_residential', 330),
              ('highway_unclassified', 330),
              ('highway_road', 330),
              ('highway_living_street', 320),
              ('highway_pedestrian', 310),
              ('highway_raceway', 300),
              ('highway_motorway_link', 240),
              ('highway_trunk_link', 230),
              ('highway_primary_link', 220),
              ('highway_secondary_link', 210),
              ('highway_tertiary_link', 200),
              ('highway_service', 150),
              ('highway_track', 110),
              ('highway_path', 100),
              ('highway_footway', 100),
              ('highway_bridleway', 100),
              ('highway_cycleway', 100),
              ('highway_steps', 100),
              ('highway_platform', 90),
              ('railway_platform', 90),
              ('aeroway_runway', 60),
              ('aeroway_taxiway', 50),
              ('highway_construction', 10)
            ) AS ordertable (feature, prio)
            USING (feature)
          JOIN (VALUES -- this join is also putting a condition on what is selected. features not matching it do not make it into the results.
              ('railway_rail', 1, 6),
              ('railway_INT-preserved-ssy', 1, 6),
              ('railway_INT-spur-siding-yard', 1, 6),
              ('railway_subway', 1, 4),
              ('railway_narrow_gauge', 1, 6),
              ('railway_light_rail', 1, 4),
              ('railway_preserved', 1, 6),
              ('railway_funicular', 1, 4),
              ('railway_monorail', 1, 4),
              ('railway_miniature', 1, 2),
              ('railway_turntable', 1, 6),
              ('railway_tram', 1, 4),
              ('railway_tram-service', 1, 4),
              ('railway_disused', 1, 6),
              ('railway_construction', 1, 6),
              ('highway_motorway', 2, 5),
              ('highway_trunk', 2, 4.75),
              ('highway_primary', 2, 4.5),
              ('highway_secondary', 2, 4.25),
              ('highway_tertiary', 2, 4),
              ('highway_residential', 2, 3),
              ('highway_unclassified', 2, 3),
              ('highway_road', 2, 3),
              ('highway_living_street', 2, 3),
              ('highway_pedestrian', 1, 5),
              ('highway_raceway', 6, 4.5),
              ('highway_motorway_link', 1, 4.5),
              ('highway_trunk_link', 1, 4.5),
              ('highway_primary_link', 1, 4.5),
              ('highway_secondary_link', 1, 4.5),
              ('highway_tertiary_link', 1, 4),
              ('highway_service', 1, 4),
              ('highway_track', 1, 3),
              ('highway_path', 1, 1.5),
              ('highway_footway', 1, 1.5),
              ('highway_bridleway', 1, 1.5),
              ('highway_cycleway', 2, 2.5),
              ('highway_steps', 1, 1.5),
              ('highway_platform', 1, 6),
              ('railway_platform', 1, 6),
              ('aeroway_runway', 1, 80),
              ('aeroway_taxiway', 1, 15),
              ('highway_construction', 2, 4.5)
            ) AS lanetable (feature, default_lane_count, default_lane_width)
            USING (feature)
          ORDER BY
            layernotnull,
            prio,
            CASE WHEN access IN ('no', 'private') THEN 0 WHEN access IN ('destination') THEN 1 ELSE 2 END,
            CASE WHEN int_surface IN ('unpaved') THEN 0 ELSE 2 END
        ) AS tunnels
        ) AS _
    properties:
      cache-features: true
      group-by: "layernotnull"
      minzoom: 9
    advanced: {}

  - <<: *layer
    status: off
    name: buildings_3d
    id:   buildings_3d
    properties:
      minzoom: 16
    Datasource:
      <<: *postgis
      geometry_field: way
      table: >
        (
          SELECT
            way,
            tags -> 'building' building,
            tags -> 'building:levels' levels
          FROM planet_osm_polygon
          WHERE way && !bbox!
            AND tags ?| ARRAY['building', 'building:levels']
            AND tags -> 'building' != 'no'
          -- ORDER BY z_order, way_area DESC
          ORDER BY (1 / ST_Y(ST_Centroid(way))) * ST_X(ST_Centroid(way)) DESC
        ) AS _

  - <<: *layer
    # status: off
    name: bridges
    id:   bridges
    geometry: "linestring"
    Datasource:
      <<: *postgis
      table: |-
        (SELECT
          *,
          1.05 * GREATEST(0.5, GREATEST(_width, COALESCE(lanes, default_lane_count) * default_lane_width) / !pixel_width!) width
        FROM
        (SELECT
            way,
            (CASE WHEN substr(feature, length(feature)-3, 4) = 'link' THEN substr(feature, 0, length(feature)-4) ELSE feature END) AS feature,
            horse,
            foot,
            bicycle,
            tracktype,
            int_surface,
            access,
            construction,
            service,
            link,
            layernotnull,
            prio,
            -- TODO write a function that handles units (feet, inches)
            to_number(0 || lanes, 'FM9999.9') lanes,
            to_number(0 || width, 'FM9999.9') _width,
            default_lane_count,
            default_lane_width
          FROM ( -- subselect that contains both roads and rail/aero
            SELECT
                way,
                ('highway_' || highway) AS feature, --only motorway to tertiary links are accepted later on
                horse,
                foot,
                bicycle,
                tracktype,
                CASE WHEN surface IN ('unpaved', 'compacted', 'dirt', 'earth', 'fine_gravel', 'grass', 'grass_paver', 'gravel', 'ground',
                                      'mud', 'pebblestone', 'salt', 'sand', 'woodchips', 'clay') THEN 'unpaved'
                  WHEN surface IN ('paved', 'asphalt', 'cobblestone', 'cobblestone:flattened', 'sett', 'concrete', 'concrete:lanes',
                                      'concrete:plates', 'paving_stones', 'metal', 'wood') THEN 'paved'
                  ELSE NULL
                END AS int_surface,
                CASE WHEN access IN ('destination') THEN 'destination'::text
                  WHEN access IN ('no', 'private') THEN 'no'::text
                  ELSE NULL
                END AS access,
                construction,
                CASE
                  WHEN service IN ('parking_aisle', 'drive-through', 'driveway') THEN 'INT-minor'::text
                  ELSE 'INT-normal'::text
                END AS service,
                CASE
                  WHEN substr(highway, length(highway)-3, 4) = 'link' THEN 'yes'
                  ELSE 'no'
                END AS link,
                COALESCE(to_number(layer, 'FM99'), 0) layernotnull,
                tags -> 'lanes' lanes,
                tags -> 'width' width
              FROM planet_osm_line
              WHERE bridge IN ('yes', 'boardwalk', 'cantilever', 'covered', 'low_water_crossing', 'movable', 'trestle', 'viaduct')
                AND tags ? 'highway'
                AND (zoom(!scale_denominator!) >= 13
                  OR (zoom(!scale_denominator!) >= 12 AND tags -> 'highway' IN ('motorway', 'trunk', 'primary', 'secondary', 'tertiary')))
                -- end of road select
            UNION ALL
            SELECT
                way,
                COALESCE(
                  ('railway_' || (CASE WHEN railway = 'preserved' AND service IN ('spur', 'siding', 'yard') THEN 'INT-preserved-ssy'::text
                                       WHEN (railway = 'rail' AND service IN ('spur', 'siding', 'yard')) THEN 'INT-spur-siding-yard'
                                       WHEN (railway = 'tram' AND service IN ('spur', 'siding', 'yard')) THEN 'tram-service' ELSE railway END)),
                  ('aeroway_' || aeroway)
                ) AS feature,
                horse,
                foot,
                bicycle,
                tracktype,
                'null',
                CASE
                  WHEN access IN ('destination') THEN 'destination'::text
                  WHEN access IN ('no', 'private') THEN 'no'::text
                  ELSE NULL
                END AS access,
                construction,
                CASE WHEN service IN ('parking_aisle', 'drive-through', 'driveway') THEN 'INT-minor'::text ELSE 'INT-normal'::text END AS service,
                'no' AS link,
                COALESCE(to_number(layer, 'FM99'), 0) layernotnull,
                tags -> 'lanes' lanes,
                tags -> 'width' width
              FROM planet_osm_line
              WHERE bridge IN ('yes', 'boardwalk', 'cantilever', 'covered', 'low_water_crossing', 'movable', 'trestle', 'viaduct')
                AND tags ?| ARRAY['railway', 'aeroway']
                AND (zoom(!scale_denominator!) >= 13
                  OR (zoom(!scale_denominator!) >= 10 AND tags ? 'aeroway'))
                -- end of rail/aero select
            ) AS features
          JOIN (VALUES -- this join is also putting a condition on what is selected. features not matching it do not make it into the results.
              ('railway_rail', 440),
              ('railway_INT-preserved-ssy', 430),
              ('railway_INT-spur-siding-yard', 430),
              ('railway_subway', 420),
              ('railway_narrow_gauge', 420),
              ('railway_light_rail', 420),
              ('railway_preserved', 420),
              ('railway_funicular', 420),
              ('railway_monorail', 420),
              ('railway_miniature', 420),
              ('railway_turntable', 420),
              ('railway_tram', 410),
              ('railway_tram-service', 405),
              ('railway_disused', 400),
              ('railway_construction', 400),
              ('highway_motorway', 380),
              ('highway_trunk', 370),
              ('highway_primary', 360),
              ('highway_secondary', 350),
              ('highway_tertiary', 340),
              ('highway_residential', 330),
              ('highway_unclassified', 330),
              ('highway_road', 330),
              ('highway_living_street', 320),
              ('highway_pedestrian', 310),
              ('highway_raceway', 300),
              ('highway_motorway_link', 240),
              ('highway_trunk_link', 230),
              ('highway_primary_link', 220),
              ('highway_secondary_link', 210),
              ('highway_tertiary_link', 200),
              ('highway_service', 150),
              ('highway_track', 110),
              ('highway_path', 100),
              ('highway_footway', 100),
              ('highway_bridleway', 100),
              ('highway_cycleway', 100),
              ('highway_steps', 100),
              ('highway_platform', 90),
              ('railway_platform', 90),
              ('aeroway_runway', 60),
              ('aeroway_taxiway', 50),
              ('highway_construction', 10)
            ) AS ordertable (feature, prio)
            USING (feature)
          JOIN (VALUES -- this join is also putting a condition on what is selected. features not matching it do not make it into the results.
              ('railway_rail', 1, 6),
              ('railway_INT-preserved-ssy', 1, 6),
              ('railway_INT-spur-siding-yard', 1, 6),
              ('railway_subway', 1, 4),
              ('railway_narrow_gauge', 1, 6),
              ('railway_light_rail', 1, 4),
              ('railway_preserved', 1, 6),
              ('railway_funicular', 1, 4),
              ('railway_monorail', 1, 4),
              ('railway_miniature', 1, 2),
              ('railway_turntable', 1, 6),
              ('railway_tram', 1, 4),
              ('railway_tram-service', 1, 4),
              ('railway_disused', 1, 6),
              ('railway_construction', 1, 6),
              ('highway_motorway', 2, 5),
              ('highway_trunk', 2, 4.75),
              ('highway_primary', 2, 4.5),
              ('highway_secondary', 2, 4.25),
              ('highway_tertiary', 2, 4),
              ('highway_residential', 2, 3),
              ('highway_unclassified', 2, 3),
              ('highway_road', 2, 3),
              ('highway_living_street', 2, 3),
              ('highway_pedestrian', 1, 5),
              ('highway_raceway', 6, 4.5),
              ('highway_motorway_link', 1, 4.5),
              ('highway_trunk_link', 1, 4.5),
              ('highway_primary_link', 1, 4.5),
              ('highway_secondary_link', 1, 4.5),
              ('highway_tertiary_link', 1, 4),
              ('highway_service', 1, 4),
              ('highway_track', 1, 3),
              ('highway_path', 1, 1.5),
              ('highway_footway', 1, 1.5),
              ('highway_bridleway', 1, 1.5),
              ('highway_cycleway', 2, 2.5),
              ('highway_steps', 1, 1.5),
              ('highway_platform', 1, 6),
              ('railway_platform', 1, 6),
              ('aeroway_runway', 1, 80),
              ('aeroway_taxiway', 1, 15),
              ('highway_construction', 2, 4.5)
            ) AS lanetable (feature, default_lane_count, default_lane_width)
            USING (feature)
          ORDER BY
            layernotnull,
            prio,
            CASE WHEN access IN ('no', 'private') THEN 0 WHEN access IN ('destination') THEN 1 ELSE 2 END,
            CASE WHEN int_surface IN ('unpaved') THEN 0 ELSE 2 END
        ) AS bridges
        ) AS _
    properties:
      group-by: "layernotnull"
      minzoom: 9
      cache-features: true
    advanced: {}

  - <<: *layer
    status: off
    name: routes
    id:   routes
    Datasource:
      <<: *postgis
      geometry_field: way
      table: >
        (
          SELECT
            way,
            tags -> 'route' route
          FROM planet_osm_line
          WHERE way && !bbox!
            AND tags ? 'route'
        ) AS _

  - <<: *layer
    status: off
    name: utilities
    id:   utilities
    Datasource:
      <<: *postgis
      geometry_field: way
      table: >
        (
          SELECT
            way,
            tags -> 'power' power
          FROM planet_osm_polygon
          WHERE way && !bbox!
            AND tags ? 'power'
        UNION ALL
          SELECT
            way,
            tags -> 'power' power
          FROM planet_osm_line
          WHERE way && !bbox!
            AND tags ? 'power'
        ) AS _


## OLD ###

  - <<: *layer
    status: off
    name: ne_10m_lakes
    id:   ne_10m_lakes
    properties:
      "buffer-size": 0
      minzoom: 5
      maxzoom: 8
    Datasource:
      <<: *postgis
      geometry_field: geom
      table: ne_10m_lakes
      encoding: "ISO-8859-1"

  - <<: *layer
    status: off
    name: ne_10m_admin_0_boundary_lines_land
    id:   ne_10m_admin_0_boundary_lines_land
    class: country-boundary-10m
    properties:
      "buffer-size": 0
      minzoom: 2
      maxzoom: 9
    Datasource:
      <<: *postgis
      geometry_field: geom
      table: ne_10m_admin_0_boundary_lines_land

  - <<: *layer
    status: off
    name: ne_10m_admin_1_states_provinces_lines
    id:   ne_10m_admin_1_states_provinces_lines
    properties:
      "buffer-size": 0
      minzoom: 2
      maxzoom: 9
    Datasource:
      <<: *postgis
      geometry_field: geom
      table: ne_10m_admin_1_states_provinces_lines

  - <<: *layer
    status: off
    name: ne-roads
    id:   ne-roads
    properties:
      "buffer-size": 0
      minzoom: 5
      maxzoom: 8
      cache-features: on
    Datasource:
      <<: *postgis
      geometry_field: geom
      table: ne_10m_roads

  - <<: *layer
    status: off
    name: site
    id:   site
    geometry: "point"
    properties:
      "buffer-size": 0
      minzoom: 12
    Datasource:
      <<: *postgis
      geometry_field: way
      table: >
        (
          SELECT
            way,
            name,
            'site' as layer,
            CASE WHEN amenity = 'shelter' OR tags->'shelter' = 'yes' THEN 'shelter'
                 WHEN tags->'refugee' = 'yes' OR tags->'idp:camp_site' = 'spontaneous_camp' THEN 'camp'
                 WHEN tags->'hazard' = 'landslide' OR tags->'hazard_type' = 'landslide' THEN 'landslide'
                 ELSE '' END as class,
            CASE WHEN tags->'refugee' = 'yes' THEN 'refugee'
                 WHEN tags->'idp:camp_site' = 'spontaneous_camp' THEN 'idp'
                 ELSE '' END as type
          FROM planet_osm_point
          WHERE way && !bbox!
            AND (amenity = 'shelter'
            OR tags->'shelter' = 'yes'
            OR tags->'refugee' = 'yes'
            OR tags->'idp:camp_site' = 'spontaneous_camp'
            OR tags->'hazard_type' = 'landslide'
            OR tags->'hazard' = 'landslide')
        ) AS _
  - <<: *layer
    status: off
    name: site_poly
    id:   site_poly
    geometry: "polygon"
    properties:
      "buffer-size": 0
      minzoom: 12
    Datasource:
      <<: *postgis
      geometry_field: way
      table: >
        (
          SELECT
            way,
            name,
            'site' as layer,
            CASE WHEN amenity = 'shelter' OR tags->'shelter' = 'yes' THEN 'shelter'
                 WHEN tags->'refugee' = 'yes' OR tags->'idp:camp_site' = 'spontaneous_camp' THEN 'camp'
                 WHEN landuse = 'residential' THEN 'residential'
                 WHEN landuse = 'brownfield' THEN 'rubble'
                 WHEN tags->'hazard' = 'landslide' OR tags->'hazard_type' = 'landslide' THEN 'landslide'
                 ELSE '' END as class,
            CASE WHEN tags->'refugee' = 'yes' THEN 'refugee'
                 WHEN tags->'idp:camp_site' = 'spontaneous_camp' THEN 'idp'
                 ELSE '' END as type
          FROM planet_osm_polygon
          WHERE way && !bbox!
            AND (amenity = 'shelter'
            OR landuse IN ('residential','brownfield')
            OR tags->'shelter' = 'yes'
            OR tags->'refugee' = 'yes'
            OR tags->'idp:camp_site' = 'spontaneous_camp'
            OR tags->'hazard_type' = 'landslide'
            OR tags->'hazard' = 'landslide')
        ) AS _
  - <<: *layer
    status: off
    name: water_barriers
    id:   water_barriers
    geometry: "polygon"
    properties:
      "buffer-size": 0
      minzoom: 10
    Datasource:
      <<: *postgis
      geometry_field: way
      table: >
        (
          SELECT
            way,
            name,
            waterway
          FROM planet_osm_line
          WHERE way && !bbox!
          AND waterway IN ('dam', 'weir', 'lock_gate')
          UNION ALL
          SELECT
            way,
            name,
            waterway
          FROM planet_osm_polygon
          WHERE way && !bbox!
          AND waterway IN ('dam', 'weir', 'lock_gate')
        ) AS _
  - <<: *layer
    status: off
    name: barrier_line
    id:   barrier_line
    geometry: "linestring"
    Datasource:
      <<: *postgis
      geometry_field: way
      table: >
        (
          SELECT
            way,
            name,
            CASE WHEN barrier IS NOT NULL THEN barrier
                 ELSE 'cliff' END AS class
          FROM planet_osm_line
          WHERE way && !bbox!
          AND ("natural" = 'cliff'
          OR barrier IN ('hedge', 'fence', 'gate','wall'))
        ) AS _
  - <<: *layer
    status: off
    name: aeroway
    id:   aeroway
    geometry: "polygon"
    Datasource:
      <<: *postgis
      geometry_field: way
      table: >
        (
          SELECT
            way,
            name,
            aeroway as type
          FROM planet_osm_line
          WHERE way && !bbox!
            AND aeroway IN ('runway','taxiway')
          UNION ALL
          SELECT
            way,
            name,
            aeroway as type
          FROM planet_osm_polygon
          WHERE way && !bbox!
            AND aeroway IN ('aerodrome','runway','taxiway','helipad','apron')
        ) AS _
          ORDER BY CASE
            WHEN type = 'aerodrome' THEN 1
            WHEN type = 'apron' THEN 2
            WHEN type = 'taxiway' THEN 3
            WHEN type = 'runway' THEN 4
            WHEN type = 'helipad' THEN 5
          END ASC
  - <<: *layer
    status: off
    name: road_area
    id:   road_area
    geometry: "polygon"
    properties:
      "buffer-size": 0
      minzoom: 10
    Datasource:
      <<: *postgis
      geometry_field: way
      table: >
        (
          SELECT
            way,
            name,
            highway as type
          FROM planet_osm_polygon
          WHERE way && !bbox!
          AND highway IN ('pedestrian','footway','service','residential')
        ) AS _
  - <<: *layer
    status: off
    name: building
    id:   building
    properties:
      "buffer-size": 0
      minzoom: 12
    geometry: "polygon"
    Datasource:
      <<: *postgis
      geometry_field: way
      table: >
        (
          SELECT
            way,
            name,
            CASE WHEN building IS NOT NULL THEN building
                 ELSE aeroway END AS type
          FROM planet_osm_polygon
          WHERE way && !bbox!
          AND (building IS NOT NULL
          OR aeroway IN ('terminal','hangar'))
        ) AS _
  - <<: *layer
    status: off
    name: building_condition
    id:   building_condition
    properties:
      "buffer-size": 0
      minzoom: 12
    geometry: "polygon"
    Datasource:
      <<: *postgis
      geometry_field: way
      table: >
        (
          SELECT
            way,
            name,
            'building_condition' as layer,
            CASE WHEN building = 'construction' THEN 'construction'
                 WHEN tags->'damage' IN ('moderate','extensive','severe') THEN 'damaged'
                 WHEN tags->'damage' IN ('total','destroyed','collapsed','collapse','partially_collapsed') OR building IN ('collapsed','collapse') THEN 'damaged'
                 WHEN tags->'damage' = 'flooded' THEN 'flooded'
                 ELSE '' END as class
          FROM planet_osm_polygon
          WHERE way && !bbox!
            AND (building IN ('construction','collapsed','collapse')
            OR tags->'damage' IN ('moderate','extensive','severe','total','destroyed','collapsed','collapse','partially_collapsed','flooded'))
        ) AS _
  - <<: *layer
    status: off
    name: landuse_overlay
    id:   landuse_overlay
    geometry: "polygon"
    properties:
      "buffer-size": 0
      minzoom: 10
    Datasource:
      <<: *postgis
      geometry_field: way
      table: >
        (
          SELECT
            way,
            name,
            CASE WHEN "natural" IN ('wetland','marsh','swamp','bog') OR wetland IN ('wetland','marsh','swamp','bog') THEN 'wetland'
                 WHEN "natural" IN ('mud','tidalflat') OR wetland IN ('mud','tidalflat') THEN 'wetland_noveg'
                 ELSE '' END as class
          FROM planet_osm_polygon
          WHERE way && !bbox!
          AND ("natural" IN ('wetland','marsh','swamp','bog','mud','tidalflat')
          OR wetland IN ('wetland','marsh','swamp','bog','mud','tidalflat'))
        ) AS _
  - <<: *layer
    status: off
    name: tunnel
    id:   tunnel
    geometry: "linestring"
    properties:
      "buffer-size": 0
      minzoom: 8
    Datasource:
      <<: *postgis
      geometry_field: way
      table: >
        (
          SELECT
            way,
            name,
            highway as type,
            access
          FROM planet_osm_line
          WHERE way && !bbox!
          AND (tunnel = 'yes' OR tunnel = 'building_massage' OR covered = 'yes')
          AND highway IN ('motorway','motorway_link','trunk','trunk_link','primary','primary_link','secondary','secondary_link','tertiary','tertiary_link','road','path','track','service','footway','bridleway','cycleway','steps','pedestrian','living_street','unclassified','residential','raceway')
        ) AS _
  - <<: *layer
    status: off
    name: road
    id:   road
    geometry: "linestring"
    properties:
      "buffer-size": 0
      minzoom: 8
    Datasource:
      <<: *postgis
      geometry_field: way
      table: >
        (
          SELECT * FROM (
            SELECT
              way,
              name,
              highway as type,
              access,
              aerialway
            FROM planet_osm_line
            WHERE way && !bbox!
            AND (tunnel IS NULL OR NOT tunnel IN ('yes', 'building_passage'))
            AND (covered IS NULL OR NOT covered = 'yes')
            AND (bridge IS NULL OR NOT bridge IN ('yes', 'boardwalk', 'cantilever', 'covered', 'low_water_crossing', 'movable', 'trestle', 'viaduct'))
            AND (highway IN ('motorway','motorway_link','trunk','trunk_link','primary','primary_link','secondary','secondary_link','tertiary','tertiary_link','road','path','track','service','footway','bridleway','cycleway','steps','pedestrian','living_street','unclassified','residential','raceway')
            OR aerialway IN ('chair_lift','mixed_lift','drag_lift','platter','t-bar','magic_carpet','gondola','cable_car','rope_tow','zip_line','j-bar','canopy'))
          ) AS features
          JOIN (VALUES
              ('motorway', 380),
              ('trunk', 370),
              ('primary', 360),
              ('secondary', 350),
              ('tertiary', 340),
              ('residential', 330),
              ('unclassified', 330),
              ('road', 330),
              ('living_street', 320),
              ('pedestrian', 310),
              ('raceway', 300),
              ('motorway_link', 240),
              ('trunk_link', 230),
              ('primary_link', 220),
              ('secondary_link', 210),
              ('tertiary_link', 200),
              ('service', 150),
              ('track', 110),
              ('path', 100),
              ('footway', 100),
              ('bridleway', 100),
              ('cycleway', 100),
              ('steps', 100)
            ) AS ordertable (type, prio)
            USING (type)
          ORDER BY
            prio
        ) AS _
  - <<: *layer
    status: off
    name: railway
    id:   railway
    geometry: "linestring"
    properties:
      "buffer-size": 0
      minzoom: 8
    Datasource:
      <<: *postgis
      geometry_field: way
      table: >
        (
          SELECT
            way,
            name,
            railway as type,
            tunnel,
            access
          FROM planet_osm_line
          WHERE way && !bbox!
          AND railway IS NOT NULL
        ) AS _
  - <<: *layer
    status: off
    name: bridge
    id:   bridge
    geometry: "linestring"
    properties:
      "buffer-size": 0
      minzoom: 8
    Datasource:
      <<: *postgis
      geometry_field: way
      table: >
        (
          SELECT
            way,
            name,
            highway as type,
            access
          FROM planet_osm_line
          WHERE way && !bbox!
          AND bridge IN ('yes', 'boardwalk', 'cantilever', 'covered', 'low_water_crossing', 'movable', 'trestle', 'viaduct')
          AND highway IN ('motorway','motorway_link','trunk','trunk_link','primary','primary_link','secondary','secondary_link','tertiary','tertiary_link','road','path','track','service','footway','bridleway','cycleway','steps','pedestrian','living_street','unclassified','residential','raceway')
        ) AS _
  - <<: *layer
    status: off
    name: road_condition
    id:   road_condition
    geometry: "linestring"
    properties:
      "buffer-size": 0
      minzoom: 12
    Datasource:
      <<: *postgis
      geometry_field: way
      table: >
        (
          SELECT
            way,
            name as barrier,
            CASE WHEN military = 'checkpoint' OR barrier = 'checkpoint' THEN 'checkpoint'
                 WHEN barrier = 'debris' THEN 'debris'
                 WHEN barrier = 'gate' THEN 'gate'
                 ELSE '' END as class
          FROM planet_osm_point
          WHERE way && !bbox!
            AND (barrier IN ('checkpoint', 'debris','gate')
            OR military = 'checkpoint')
        ) AS _
  - <<: *layer
    status: off
    name: sanitation
    id:   sanitation
    geometry: "point"
    properties:
      "buffer-size": 0
      minzoom: 12
    Datasource:
      <<: *postgis
      geometry_field: way
      table: >
        (
          SELECT
            way,
            name,
            'sanitation' as layer,
            CASE WHEN amenity = 'shower' THEN 'shower'
                 WHEN amenity = 'toilets' THEN 'toilet'
                 WHEN amenity IN ('waste_disposal','waste_basket','sanitary_dump_station') OR landuse = 'landfill' OR man_made = 'wastewater_plant' OR tags->'informal' = 'dumpsite' THEN 'waste'
                 ELSE '' END as class
          FROM planet_osm_point
          WHERE way && !bbox!
            AND (amenity IN ('shower', 'toilets','waste_disposal','waste_basket','sanitary_dump_station')
            OR landuse = 'landfill'
            OR man_made = 'wastewater_plant'
            OR tags->'informal' = 'dumpsite')
        ) AS _
  - <<: *layer
    status: off
    name: sanitation_poly
    id:   sanitation_poly
    geometry: "polygon"
    properties:
      "buffer-size": 0
      minzoom: 12
    Datasource:
      <<: *postgis
      geometry_field: way
      table: >
        (
          SELECT
            way,
            name,
            'sanitation' as layer,
            CASE WHEN amenity = 'shower' THEN 'shower'
                 WHEN amenity = 'toilets' THEN 'toilet'
                 WHEN amenity IN ('waste_disposal','waste_basket','sanitary_dump_station') OR landuse = 'landfill' OR man_made = 'wastewater_plant' OR tags->'informal' = 'dumpsite' THEN 'waste'
                 ELSE '' END as class
          FROM planet_osm_polygon
          WHERE way && !bbox!
            AND (amenity IN ('shower', 'toilets','waste_disposal','waste_basket','sanitary_dump_station')
            OR landuse = 'landfill'
            OR man_made = 'wastewater_plant'
            OR tags->'informal' = 'dumpsite')
        ) AS _
  - <<: *layer
    status: off
    name: water_source
    id:   water_source
    geometry: "point"
    properties:
      "buffer-size": 0
      minzoom: 10
    Datasource:
      <<: *postgis
      geometry_field: way
      table: >
        (
          SELECT
            way,
            name,
            'water_source' as layer,
            CASE WHEN man_made = 'water_well' THEN 'water well'
                 WHEN man_made = 'water_tower' THEN 'water tower'
                 WHEN man_made IN ('storage_tank','water_tank') THEN 'water tower'
                 WHEN "natural" = 'spring' THEN 'spring'
                 WHEN amenity = 'drinking_water' THEN 'drinking water'
                 ELSE '' END as class,
            CASE WHEN tags->'drinking_water' = 'yes' OR amenity = 'drinking_water' THEN 'yes'
                 WHEN tags->'drinking_water' = 'no' THEN 'no'
                 ELSE '' END as potable,
            CASE WHEN tags->'pump' = 'yes' THEN 'yes'
                 WHEN tags->'pump' = 'manual' OR tags->'pump_type' = 'manual' THEN 'manual'
                 WHEN tags->'pump' = 'powered' OR tags->'pump_type' = 'powered_network' THEN 'powered'
                 ELSE '' END as pump
          FROM planet_osm_point
          WHERE way && !bbox!
            AND (man_made IN ('water_well', 'water_tower','storage_tank','water_tank')
            OR "natural" = 'spring'
            OR amenity = 'drinking_water')
        ) AS _
  - <<: *layer
    status: off
    name: water_source_poly
    id:   water_source_poly
    geometry: "polygon"
    properties:
      "buffer-size": 0
      minzoom: 10
    Datasource:
      <<: *postgis
      geometry_field: way
      table: >
        (
          SELECT
            way,
            name,
            'water_source' as layer,
            CASE WHEN man_made = 'water_well' THEN 'water well'
                 WHEN man_made = 'water_tower' THEN 'water tower'
                 WHEN man_made IN ('storage_tank','water_tank') THEN 'water tower'
                 WHEN "natural" = 'spring' THEN 'spring'
                 WHEN amenity = 'drinking_water' THEN 'drinking water'
                 ELSE '' END as class,
            CASE WHEN tags->'drinking_water' = 'yes' OR amenity = 'drinking_water' THEN 'yes'
                 WHEN tags->'drinking_water' = 'no' THEN 'no'
                 ELSE '' END as potable,
            CASE WHEN tags->'pump' = 'yes' THEN 'yes'
                 WHEN tags->'pump' = 'manual' OR tags->'pump_type' = 'manual' THEN 'manual'
                 WHEN tags->'pump' = 'powered' OR tags->'pump_type' = 'powered_network' THEN 'powered'
                 ELSE '' END as pump
          FROM planet_osm_polygon
          WHERE way && !bbox!
            AND (man_made IN ('water_well', 'water_tower','storage_tank','water_tank')
            OR "natural" = 'spring'
            OR amenity = 'drinking_water')
        ) AS _
  - <<: *layer
    status: off
    name: emergency
    id:   emergency
    geometry: "point"
    properties:
      "buffer-size": 0
      minzoom: 10
    Datasource:
      <<: *postgis
      geometry_field: way
      table: >
        (
          SELECT
            way,
            name,
            'emergency' as layer,
            CASE WHEN tags->'emergency' IN ('ambulance_station','defibrillator','aed') OR tags->'medical' = 'aed' THEN 'medical rescue'
                 WHEN tags->'emergency' IN ('fire_extinguisher','fire_hydrant','fire_hose','fire_flapper') THEN 'fire fighting'
                 WHEN tags->'emergency' IN ('lifeguard_base','lifeguard_platform','lifeguard_place') THEN 'lifeguarding'
                 WHEN tags->'emergency' = 'assembly_point' THEN 'assembly point'
                 WHEN tags->'emergency' = 'access_point' THEN 'access point'
                 WHEN tags->'emergency' = 'phone' THEN 'emergency phone'
                 WHEN tags->'emergency' = 'siren' THEN 'emergency siren'
                 WHEN aeroway = 'helipad' THEN 'helicopter'
                 WHEN tags->'emergency:helipad' = 'potential' OR tags->'emergency' = 'landing_site' THEN 'helicopter_potential'
                 ELSE '' END as class
          FROM planet_osm_point
          WHERE way && !bbox!
            AND (tags->'emergency' IN ('ambulance_station','defibrillator','aed','fire_extinguisher','fire_hydrant','fire_hose','fire_flapper','assembly_point','access_point','phone','siren','landing_site')
            OR tags->'medical' = 'aed'
            OR tags->'emergency:helipad' = 'potential'
            OR aeroway = 'helipad')
        ) AS _
  - <<: *layer
    status: off
    name: emergency_poly
    id:   emergency_poly
    geometry: "polygon"
    properties:
      "buffer-size": 0
      minzoom: 10
    Datasource:
      <<: *postgis
      geometry_field: way
      table: >
        (
          SELECT
            way,
            name,
            'emergency' as layer,
            CASE WHEN tags->'emergency' IN ('ambulance_station','defibrillator','aed') OR tags->'medical' = 'aed' THEN 'medical rescue'
                 WHEN tags->'emergency' IN ('fire_extinguisher','fire_hose','fire_flapper') THEN 'fire fighting'
                 WHEN tags->'emergency' = 'fire_hydrant' THEN 'hydrant'
                 WHEN tags->'emergency' IN ('lifeguard_base','lifeguard_platform','lifeguard_place') THEN 'lifeguarding'
                 WHEN tags->'emergency' = 'assembly_point' THEN 'assembly point'
                 WHEN tags->'emergency' = 'access_point' THEN 'access point'
                 WHEN tags->'emergency' = 'phone' THEN 'emergency phone'
                 WHEN tags->'emergency' = 'siren' THEN 'emergency siren'
                 WHEN aeroway = 'helipad' THEN 'helicopter'
                 WHEN tags->'emergency:helipad' = 'potential' OR tags->'emergency' = 'landing_site' THEN 'helicopter_potential'
                 ELSE '' END as class
          FROM planet_osm_polygon
          WHERE way && !bbox!
            AND (tags->'emergency' IN ('ambulance_station','defibrillator','aed','fire_extinguisher','fire_hydrant','fire_hose','fire_flapper','assembly_point','access_point','phone','siren','landing_site')
            OR tags->'medical' = 'aed'
            OR tags->'emergency:helipad' = 'potential'
            OR aeroway = 'helipad')
        ) AS _
  - <<: *layer
    status: off
    name: medical
    id:   medical
    geometry: "point"
    properties:
      "buffer-size": 0
      minzoom: 10
    Datasource:
      <<: *postgis
      geometry_field: way
      table: >
        (
          SELECT
            way,
            name,
            'medical' as layer,
            CASE WHEN amenity = 'hospital' THEN 'hospital'
                 WHEN amenity = 'clinic' THEN 'clinic'
                 WHEN tags->'health_facility_type' = 'field_hospital' OR tags->'health_facility:type' = 'field_hospital' THEN 'field hospital'
                 WHEN amenity = 'pharmacy' THEN 'pharmacy'
                 WHEN tags->'health_facility_type' = 'dispensary' OR tags->'health_facility:type' = 'dispensary' THEN 'dispensary'
                 WHEN amenity = 'mortuary' THEN 'morgue'
                 ELSE '' END as class
          FROM planet_osm_point
          WHERE way && !bbox!
            AND (amenity IN ('hospital', 'clinic','pharmacy','mortuary')
            OR tags->'health_facility_type' IN ('field_hospital', 'dispensary')
            OR tags->'health_facility:type' IN ('field_hospital', 'dispensary'))
        ) AS _
  - <<: *layer
    status: off
    name: medical_poly
    id:   medical_poly
    geometry: "polygon"
    properties:
      "buffer-size": 0
      minzoom: 10
    Datasource:
      <<: *postgis
      geometry_field: way
      table: >
        (
          SELECT
            way,
            name,
            'medical' as layer,
            CASE WHEN amenity = 'hospital' THEN 'hospital'
                 WHEN amenity = 'clinic' THEN 'clinic'
                 WHEN tags->'health_facility_type' = 'field_hospital' OR tags->'health_facility:type' = 'field_hospital' THEN 'field hospital'
                 WHEN amenity = 'pharmacy' THEN 'pharmacy'
                 WHEN tags->'health_facility_type' = 'dispensary' OR tags->'health_facility:type' = 'dispensary' THEN 'dispensary'
                 WHEN amenity = 'mortuary' THEN 'morgue'
                 ELSE '' END as class
          FROM planet_osm_polygon
          WHERE way && !bbox!
            AND (amenity IN ('hospital', 'clinic','pharmacy','mortuary')
            OR tags->'health_facility_type' IN ('field_hospital', 'dispensary')
            OR tags->'health_facility:type' IN ('field_hospital', 'dispensary'))
        ) AS _
  - <<: *layer
    status: off
    name: communication
    id:   communication
    geometry: "point"
    properties:
      "buffer-size": 0
      minzoom: 12
    Datasource:
      <<: *postgis
      geometry_field: way
      table: >
        (
          SELECT
            way,
            name,
            'communication' as layer,
            CASE WHEN "tower:type" = 'communication' OR man_made = 'communications_tower' THEN 'tower'
                 WHEN man_made = 'communications_dish' THEN 'dish'
                 WHEN amenity = 'community_information_kiosk' OR tags->'board_type' = 'notice' THEN 'notice board'
                 ELSE '' END as class
          FROM planet_osm_point
          WHERE way && !bbox!
            AND (man_made IN ('communications_tower', 'communications_dish')
            OR amenity = 'community_information_kiosk'
            OR "tower:type" = 'communication'
            OR tags->'board_type' = 'notice')
        ) AS _
  - <<: *layer
    status: off
    name: electric_utility
    id:   electric_utility
    geometry: "point"
    properties:
      "buffer-size": 0
      minzoom: 12
    Datasource:
      <<: *postgis
      geometry_field: way
      table: >
        (
          SELECT
            way,
            name,
            'electric_utility' as layer,
            CASE WHEN power = 'generator' THEN 'generator'
                 WHEN power IN ('tower','pole','line','minor_line') THEN 'transmission'
                 WHEN power IN ('station','substation','sub_station','transformer') THEN 'distribution'
                 ELSE '' END as class,
            "generator:source" AS power_source,
            CASE WHEN power = 'tower' THEN 'tower'
                 WHEN power = 'pole' THEN 'pole'
                 WHEN power IN ('line','minor_line') THEN 'line'
                 ELSE '' END as structure
          FROM planet_osm_point
          WHERE way && !bbox!
            AND power IN ('generator','tower','pole','line','minor_line','station','substation','sub_station','transformer')
        ) AS _
  - <<: *layer
    status: off
    name: electric_utility_line
    id:   electric_utility_line
    geometry: "linestring"
    properties:
      "buffer-size": 0
      minzoom: 12
    Datasource:
      <<: *postgis
      geometry_field: way
      table: >
        (
          SELECT
            way,
            name,
            'electric_utility' as layer,
            CASE WHEN power = 'generator' THEN 'generator'
                 WHEN power IN ('tower','pole','line','minor_line') THEN 'transmission'
                 WHEN power IN ('station','substation','sub_station','transformer') THEN 'distribution'
                 ELSE '' END as class,
            "generator:source" AS power_source,
            CASE WHEN power = 'tower' THEN 'tower'
                 WHEN power = 'pole' THEN 'pole'
                 WHEN power IN ('line','minor_line') THEN 'line'
                 ELSE '' END as structure
          FROM planet_osm_line
          WHERE way && !bbox!
            AND power IN ('generator','tower','pole','line','minor_line','station','substation','sub_station','transformer')
        ) AS _
  - <<: *layer
    status: off
    name: electric_utility_poly
    id:   electric_utility_poly
    geometry: "polygon"
    properties:
      "buffer-size": 0
      minzoom: 12
    Datasource:
      <<: *postgis
      geometry_field: way
      table: >
        (
          SELECT
            way,
            name,
            'electric_utility' as layer,
            CASE WHEN power = 'generator' THEN 'generator'
                 WHEN power IN ('tower','pole','line','minor_line') THEN 'transmission'
                 WHEN power IN ('station','substation','sub_station','transformer') THEN 'distribution'
                 ELSE '' END as class,
            "generator:source" AS power_source,
            CASE WHEN power = 'tower' THEN 'tower'
                 WHEN power = 'pole' THEN 'pole'
                 WHEN power IN ('line','minor_line') THEN 'line'
                 ELSE '' END as structure
          FROM planet_osm_polygon
          WHERE way && !bbox!
            AND power IN ('generator','tower','pole','line','minor_line','station','substation','sub_station','transformer')
        ) AS _
  - <<: *layer
    status: off
    name: admin
    id: admin
    geometry: "linestring"
    Datasource:
      <<: *postgis
      geometry_field: way
      table: >
        (SELECT
            way,
            to_number(admin_level, 'FM99') as admin_level
          FROM planet_osm_line
          WHERE boundary = 'administrative'
            AND admin_level IN ('0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10')
          ORDER BY to_number(admin_level, 'FM99') DESC -- With 10 as a valid value, we need to do a numeric ordering, not a text ordering
        ) AS _
#  - country_label_line

# Having issues with admin_0_label_points, so use this instead
#  - country_label
  - <<: *layer
    status: off
    name: ne_10m_admin_0_countries_lakes
    id:   ne_10m_admin_0_countries_lakes
    properties:
      "buffer-size": 0
      minzoom: 2
      maxzoom: 9
    Datasource:
      <<: *postgis
      geometry_field: geom
      table: ne_10m_admin_0_countries_lakes

#  - state_label
  - <<: *layer
    status: off
    name: ne_10m_admin_1_label_points
    id:   ne_10m_admin_1_label_points
    properties:
      "buffer-size": 0
      minzoom: 2
      maxzoom: 9
    Datasource:
      <<: *postgis
      geometry_field: geom
      table: ne_10m_admin_1_label_points

#  - marine_label
  - <<: *layer
    status: off
    name: ne_10m_rivers_lake_centerlines_scale_rank_labels
    id:   ne_10m_rivers_lake_centerlines_scale_rank_labels
    properties:
      "buffer-size": 0
      minzoom: 4
      maxzoom: 8
    Datasource:
      <<: *postgis
      geometry_field: geom
      table: ne_10m_rivers_lake_centerlines_scale_rank
      encoding: "ISO-8859-1"


  - <<: *layer
    status: off
    id: place_label
    name: place_label
    properties:
      "buffer-size": 0
      minzoom: 8
    geometry: "point"
    Datasource:
      <<: *postgis
      table: |-
        (SELECT
            way,
            place as type,
            population,
            name,
            ref
          FROM planet_osm_point
          WHERE way && !bbox!
            AND place IN ('city', 'town', 'suburb', 'village', 'hamlet', 'neighbourhood', 'locality', 'isolated_dwelling', 'farm', 'junction', 'traffic_signals')
            AND name IS NOT NULL
          ORDER BY CASE
              WHEN place = 'city' THEN 1
              WHEN place = 'town' THEN 2
              WHEN place = 'suburb' THEN 3
              WHEN place = 'village' THEN 4
              WHEN place = 'hamlet' THEN 5
              WHEN place = 'neighbourhood' THEN 6
              WHEN place = 'locality' THEN 7
              WHEN place = 'isolated_dwelling' THEN 8
              WHEN place = 'farm' THEN 9
              WHEN place = 'junction' THEN 10
              WHEN place = 'traffic_signals' THEN 11
            END ASC
        ) AS place_label

#  - water_label
  - <<: *layer
    status: off
    id: poi_label
    name: poi_label
    properties:
      "buffer-size": 0
      minzoom: 8
    geometry: "point"
    Datasource:
      <<: *postgis
      table: |-
        (SELECT
            way,
            name,
            CASE WHEN amenity IS NOT NULL THEN amenity
                 WHEN tourism IS NOT NULL THEN tourism
                 WHEN shop IS NOT NULL THEN shop
                 WHEN leisure IS NOT NULL THEN leisure
                 WHEN place IS NOT NULL THEN place
                 WHEN "natural" IS NOT NULL THEN "natural"
                 WHEN man_made IS NOT NULL THEN man_made
                 ELSE '' END AS type,
            CASE WHEN amenity IN ('bank','bar','cafe','cinema','college','dentist','embassy','fuel','hospital','police','restaurant') THEN amenity
                 WHEN amenity = 'bus_station' OR highway = 'bus_stop' THEN 'bus'
                 WHEN amenity = 'doctors' THEN 'hospital'
                 WHEN amenity = 'fast_food' THEN 'fast-food'
                 WHEN amenity = 'fire_station' THEN 'fire-station'
                 WHEN amenity = 'ice_cream' OR shop = 'ice_cream' THEN 'ice-cream'
                 WHEN amenity IN ('kindergarten','school') THEN 'school'
                 WHEN amenity = 'place_of_worship' THEN 'place-of-worship'
                 WHEN amenity = 'pub' THEN 'bar'
                 WHEN amenity = 'public_building' THEN 'building'
                 WHEN amenity = 'swimming_pool' THEN 'swimming'
                 WHEN leisure = 'swimming_pool' THEN 'swimming'
                 WHEN amenity = 'university' THEN 'college'
                 WHEN amenity IN ('townhall','courthouse') THEN 'town-hall'
                 WHEN amenity IN ('post_box','post_office') THEN 'post'
                 WHEN leisure IN ('pitch','sports_centre') THEN 'pitch'
                 WHEN leisure = 'playground' THEN 'playground'
                 WHEN tourism IN ('museum','zoo') THEN tourism
                 WHEN tourism IN ('hotel','motel','hostel','guest_house') THEN 'lodging'
                 WHEN tourism = 'camp_site' THEN 'campsite'
                 WHEN shop IN ('bakery','bicycle','camera','car','laundry','music') THEN shop
                 WHEN shop IN ('convenience','greengrocer','supermarket','marketplace') THEN 'grocery'
                 WHEN shop IN ('alcohol','beverages') THEN 'alcohol-shop'
                 WHEN shop = 'art' OR amenity = 'arts_centre' THEN 'art-gallery'
                 WHEN shop = 'hifi' THEN 'music'
                 WHEN shop IN ('car_parts','car_repair') THEN 'car'
                 WHEN shop = 'clothes' THEN 'clothing-store'
                 WHEN shop = 'mobile_phone' THEN 'mobilephone'
                 WHEN man_made IN ('lighthouse','bicycle','camera') THEN man_made
                 WHEN man_made = 'petroleum_well' THEN 'oil-well'
                 WHEN man_made = 'obelisk' THEN 'monument'
                 WHEN man_made IS NOT NULL THEN 'square'
                 WHEN shop IS NOT NULL THEN 'shop'
                 ELSE '' END AS maki
          FROM planet_osm_point
          WHERE way && !bbox!
            AND (place IS NULL OR place NOT IN ('city', 'town', 'suburb', 'village', 'hamlet', 'neighbourhood', 'locality', 'isolated_dwelling', 'farm', 'junction', 'traffic_signals','country', 'county', 'region', 'state'))
        UNION ALL
        SELECT
            way,
            name,
            CASE WHEN amenity IS NOT NULL THEN amenity
                 WHEN tourism IS NOT NULL THEN tourism
                 WHEN shop IS NOT NULL THEN shop
                 WHEN leisure IS NOT NULL THEN leisure
                 WHEN place IS NOT NULL THEN place
                 WHEN "natural" IS NOT NULL THEN "natural"
                 WHEN man_made IS NOT NULL THEN man_made
                 ELSE '' END AS type,
            CASE WHEN amenity IN ('bank','bar','cafe','cinema','college','dentist','embassy','fuel','hospital','police','restaurant') THEN amenity
                 WHEN amenity = 'bus_station' OR highway = 'bus_stop' THEN 'bus'
                 WHEN amenity = 'doctors' THEN 'hospital'
                 WHEN amenity = 'fast_food' THEN 'fast-food'
                 WHEN amenity = 'fire_station' THEN 'fire-station'
                 WHEN amenity = 'ice_cream' OR shop = 'ice_cream' THEN 'ice-cream'
                 WHEN amenity IN ('kindergarten','school') THEN 'school'
                 WHEN amenity = 'place_of_worship' THEN 'place-of-worship'
                 WHEN amenity = 'pub' THEN 'bar'
                 WHEN amenity = 'public_building' THEN 'building'
                 WHEN amenity = 'swimming_pool' THEN 'swimming'
                 WHEN leisure = 'swimming_pool' THEN 'swimming'
                 WHEN amenity = 'university' THEN 'college'
                 WHEN amenity IN ('townhall','courthouse') THEN 'town-hall'
                 WHEN amenity IN ('post_box','post_office') THEN 'post'
                 WHEN leisure IN ('pitch','sports_centre') THEN 'pitch'
                 WHEN leisure = 'playground' THEN 'playground'
                 WHEN tourism IN ('museum','zoo') THEN tourism
                 WHEN tourism IN ('hotel','motel','hostel','guest_house') THEN 'lodging'
                 WHEN tourism = 'camp_site' THEN 'campsite'
                 WHEN shop IN ('bakery','bicycle','camera','car','laundry','music') THEN shop
                 WHEN shop IN ('convenience','greengrocer','supermarket','marketplace') THEN 'grocery'
                 WHEN shop IN ('alcohol','beverages') THEN 'alcohol-shop'
                 WHEN shop = 'art' OR amenity = 'arts_centre' THEN 'art-gallery'
                 WHEN shop = 'hifi' THEN 'music'
                 WHEN shop IN ('car_parts','car_repair') THEN 'car'
                 WHEN shop = 'clothes' THEN 'clothing-store'
                 WHEN shop = 'mobile_phone' THEN 'mobilephone'
                 WHEN man_made IN ('lighthouse','bicycle','camera') THEN man_made
                 WHEN man_made = 'petroleum_well' THEN 'oil-well'
                 WHEN man_made = 'obelisk' THEN 'monument'
                 WHEN man_made IS NOT NULL THEN 'square'
                 WHEN shop IS NOT NULL THEN 'shop'
                 ELSE '' END AS maki
          FROM planet_osm_polygon
          WHERE way && !bbox!
        ) AS poi_label
  - <<: *layer
    status: off
    id: road_label
    name: road_label
    geometry: "linestring"
    properties:
      "buffer-size": 0
      minzoom: 12
    Datasource:
      <<: *postgis
      table: |-
        (SELECT way, osm_id, name,
            highway as class,
            ST_Length(way) as len
            FROM planet_osm_line
            WHERE
            way && !bbox!
            AND highway IS NOT NULL
            AND name IS NOT NULL
        ) AS data
  - <<: *layer
    status: off
    id: roads-text-ref
    name: roads-text-ref
    class: ""
    geometry: "linestring"
    properties:
      "buffer-size": 0
      minzoom: 10
    Datasource:
      <<: *postgis
      table: |-
       (SELECT * FROM
       (SELECT
         way,
         highway,
         orig_ref,
         array_length(refs,1) AS height,
         regexp_replace(orig_ref, '\s*;\s*', E'\n', 'g') AS refs,
         MAX(ref_width) as width
       FROM (
         SELECT way, highway, orig_ref, refs, ref, SUM(CASE WHEN ascii_val < 255 THEN 1 ELSE 2 END) AS ref_width
         FROM (
           SELECT way, highway, orig_ref, refs, ref, ascii(unnest(string_to_array(ref,NULL))) as ascii_val
           FROM (
             SELECT way, highway, orig_ref, refs, trim(both from unnest(refs)) AS ref
             FROM (
               SELECT
                       way,
                       COALESCE(
                         CASE WHEN highway IN ('motorway', 'trunk', 'primary', 'secondary', 'tertiary', 'unclassified', 'residential') THEN highway ELSE NULL END,
                         CASE WHEN aeroway IN ('runway', 'taxiway') THEN aeroway ELSE NULL END
                       ) AS highway,
                       ref as orig_ref,
                       string_to_array(ref, ';') AS refs
                     FROM planet_osm_line
                       WHERE way && !bbox!
                         AND (highway IN ('motorway', 'trunk', 'primary', 'secondary', 'tertiary', 'unclassified', 'residential') OR aeroway IN ('runway', 'taxiway'))
                         AND ref IS NOT NULL AND ref LIKE '%;%'
             ) AS query
           ) AS query2
         ) AS query3
         GROUP BY way, highway, orig_ref, refs, ref
       ) AS query4
       GROUP BY way, highway, orig_ref, refs) as innerquery
       WHERE height <= 4 AND width <= 10) as roads_text_ref
#  - waterway_label
  - <<: *layer
    status: off
    id: housenum_label
    name: housenum_label
    geometry: "point"
    properties:
      "buffer-size": 0
      minzoom: 18
    Datasource:
      <<: *postgis
      table: |-
        (SELECT way, osm_id, house_num
          FROM
          (
            SELECT way, osm_id, "addr:housenumber" as house_num
            FROM planet_osm_point
            WHERE
            way && !bbox!
            AND "addr:housenumber" IS NOT NULL
            UNION ALL
            SELECT ST_Centroid(way) as way, osm_id, "addr:housenumber" as house_num
            FROM planet_osm_polygon
            WHERE
            way && !bbox!
            AND "addr:housenumber" IS NOT NULL
          ) AS housenumbers
        ) AS data
